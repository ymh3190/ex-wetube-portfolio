/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/public/js/comment.js":
/*!**********************************!*\
  !*** ./src/public/js/comment.js ***!
  \**********************************/
/***/ (() => {

eval("function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar commentForm = document.getElementById(\"commentForm\");\nvar commentInput = document.getElementById(\"commentInput\");\nvar cancelComment = document.getElementById(\"cancelComment\");\nvar commentBtn = document.getElementById(\"commentBtn\");\nvar delComments = document.querySelectorAll(\"#delComment\");\nvar commentContainers = document.getElementById(\"commentContainers\");\nvar commentsLength = document.getElementById(\"commentsLength\");\n\nfunction handleSubmitComment(_x) {\n  return _handleSubmitComment.apply(this, arguments);\n}\n\nfunction _handleSubmitComment() {\n  _handleSubmitComment = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {\n    var text, _video, id, response, _yield$response$json, _text, user, commentId, commentContainer, img, usernameH2, createdAtH2, textSpan, delComment;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n            text = commentInput.value;\n            commentInput.value = \"\";\n            _video = video, id = _video.dataset.id;\n\n            if (text) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return fetch(\"/api/comment\", {\n              method: \"post\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                text: text,\n                id: id\n              })\n            });\n\n          case 8:\n            response = _context.sent;\n\n            if (!(response.status === 200)) {\n              _context.next = 38;\n              break;\n            }\n\n            _context.next = 12;\n            return response.json();\n\n          case 12:\n            _yield$response$json = _context.sent;\n            _text = _yield$response$json.text;\n            user = _yield$response$json.user;\n            commentId = _yield$response$json.commentId;\n            commentContainer = document.createElement(\"div\");\n            img = document.createElement(\"img\");\n            img.src = user.profilePhoto;\n            img.width = 50;\n            img.height = 50;\n            commentContainer.appendChild(img);\n            usernameH2 = document.createElement(\"h2\");\n            usernameH2.innerText = user.username;\n            commentContainer.appendChild(usernameH2);\n            createdAtH2 = document.createElement(\"h2\");\n            createdAtH2.innerText = new Date();\n            commentContainer.appendChild(createdAtH2);\n            textSpan = document.createElement(\"span\");\n            textSpan.innerText = _text;\n            commentContainer.appendChild(textSpan);\n            delComment = document.createElement(\"div\");\n            delComment.innerText = \"‚ùå\";\n            delComment.dataset.id = commentId;\n            delComment.addEventListener(\"click\", handleClickDelComment);\n            commentContainer.appendChild(delComment);\n            commentContainers.prepend(commentContainer);\n            commentsLength.innerText = parseInt(commentsLength.innerText, 10) + 1;\n\n          case 38:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _handleSubmitComment.apply(this, arguments);\n}\n\nfunction handleFocusComment() {\n  cancelComment.style.display = \"block\";\n  commentInput.addEventListener(\"focusout\", handleFocusoutComment);\n}\n\nfunction handleFocusoutComment() {\n  cancelComment.style.display = \"none\";\n  commentInput.removeEventListener(\"focusout\", handleFocusoutComment);\n}\n\nfunction handleInputComment() {\n  var text = commentInput.value;\n\n  if (!text) {\n    commentBtn.disabled = true;\n  }\n\n  commentBtn.disabled = false;\n}\n\nfunction handleClickDelComment(_x2) {\n  return _handleClickDelComment.apply(this, arguments);\n}\n\nfunction _handleClickDelComment() {\n  _handleClickDelComment = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(e) {\n    var commentId, videoId, response;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            commentId = e.target.dataset.id;\n            videoId = video.dataset.id;\n            _context2.next = 4;\n            return fetch(\"/api/comment/del\", {\n              method: \"post\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                commentId: commentId,\n                videoId: videoId\n              })\n            });\n\n          case 4:\n            response = _context2.sent;\n\n            if (response.status === 200) {\n              e.target.parentElement.parentElement.removeChild(e.target.parentElement);\n              commentsLength.innerText = parseInt(commentsLength.innerText, 10) - 1;\n            }\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _handleClickDelComment.apply(this, arguments);\n}\n\ncommentForm.addEventListener(\"submit\", handleSubmitComment);\ncommentInput.addEventListener(\"focus\", handleFocusComment);\ncommentInput.addEventListener(\"input\", handleInputComment);\ndelComments.forEach(function (delComment) {\n  return delComment.addEventListener(\"click\", handleClickDelComment);\n});\n\n//# sourceURL=webpack://wetube/./src/public/js/comment.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/public/js/comment.js"]();
/******/ 	
/******/ })()
;